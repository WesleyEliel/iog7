# Generated by Django 4.1.4 on 2023-01-05 10:19

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_user', models.IntegerField(verbose_name='User number')),
                ('winning_matches', models.IntegerField(verbose_name='Winning matches')),
                ('people_love', models.IntegerField(verbose_name='People love')),
                ('is_active', models.BooleanField(default=True, verbose_name='Design if the Match is available')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Counter',
                'verbose_name_plural': 'Counters',
            },
        ),
        migrations.CreateModel(
            name='EncryptedProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('encrypted_text', models.TextField(verbose_name='Encrypted text')),
                ('key', models.CharField(blank=True, max_length=220, null=True, verbose_name='Key')),
                ('display_key', models.BooleanField(default=True, verbose_name='Display the key')),
                ('is_active', models.BooleanField(default=True, verbose_name='Design if the proof is available')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Encrypted Proof',
                'verbose_name_plural': 'Encrypted Proofs',
            },
        ),
        migrations.CreateModel(
            name='ImageProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=20, verbose_name='Nom')),
                ('lastname', models.CharField(max_length=20, verbose_name='Prenoms')),
                ('resume', models.CharField(max_length=220, verbose_name='Resumé')),
                ('image', models.ImageField(upload_to='', verbose_name='Image')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='Avatar')),
                ('is_active', models.BooleanField(default=True, verbose_name='Designe si la preuve est valable')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Preuve Visuelle',
                'verbose_name_plural': 'Preuves Vissuelles',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date de jeu')),
                ('odd', models.FloatField(verbose_name='Côte')),
                ('odd_type', models.CharField(choices=[('fixed', 'Fixed'), ('ht_ft', 'Half / Full Time'), ('full_time', 'Full Time')], max_length=220, verbose_name='Type de Côte')),
                ('match_id', models.IntegerField(default='75453208', verbose_name='Match Id')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Prix')),
                ('is_active', models.BooleanField(default=True, verbose_name='Designe si le match valable')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
            },
        ),
        migrations.CreateModel(
            name='PredictionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(verbose_name='Date et heure du jeu')),
                ('competition', models.CharField(max_length=255, verbose_name='Competition')),
                ('first_team', models.CharField(max_length=25, verbose_name='Première Equipe')),
                ('second_team', models.CharField(max_length=25, verbose_name='Deuxième Equipe')),
                ('first_team_goals_number', models.IntegerField(default=0, verbose_name='Nombre de Buts Première Equipe')),
                ('second_team_goals_number', models.IntegerField(default=0, verbose_name='Nombre de Buts Deuxième Equipe')),
                ('prediction', models.CharField(max_length=25, verbose_name='Prediction Suggérée')),
                ('odd', models.FloatField(verbose_name='Côte')),
                ('is_success', models.BooleanField(default=True, verbose_name='Designe si la prédiction est un succès')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Historique de Prediction',
                'verbose_name_plural': 'Historiques de Prédiction',
            },
        ),
        migrations.CreateModel(
            name='PricingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Nom')),
                ('price', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Prix')),
                ('order', models.SmallIntegerField(default=1, verbose_name='Ordre')),
                ('first_feature', models.CharField(blank=True, max_length=255, null=True, verbose_name='1er Avantage')),
                ('second_feature', models.CharField(blank=True, max_length=255, null=True, verbose_name='2em Avantage')),
                ('third_feature', models.CharField(blank=True, max_length=255, null=True, verbose_name='3em Avantage')),
                ('fourth_feature', models.CharField(blank=True, max_length=255, null=True, verbose_name='4em Avantage')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('is_active', models.BooleanField(default=True, verbose_name='Designe si le plan est valable')),
                ('is_big_plan', models.BooleanField(default=False, verbose_name="Design si le plan est 'Big'")),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': "Plan d'abonnement",
                'verbose_name_plural': "Plan d'abonnements",
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Surfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('telegram_link', models.URLField(blank=True, verbose_name="Compte Telegram de l'utilisateur")),
                ('is_banned', models.BooleanField(default=False, verbose_name="Designe si l'utilisateur est banni")),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='TextProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume', models.CharField(max_length=100, verbose_name='Resumé')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('firstname', models.CharField(max_length=20, verbose_name='Nom')),
                ('lastname', models.CharField(max_length=20, verbose_name='Prenoms')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='Avatar')),
                ('is_active', models.BooleanField(default=True, verbose_name='Designe si la preuve est valable')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Preuve textuelle',
                'verbose_name_plural': 'Preuves Textuelles',
            },
        ),
        migrations.CreateModel(
            name='VideoProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume', models.CharField(max_length=220, verbose_name='Resumé')),
                ('thumbnail', models.ImageField(upload_to='', verbose_name='Thumbnail')),
                ('video', models.FileField(upload_to='', verbose_name='Fichier Vidéo')),
                ('is_active', models.BooleanField(default=True, verbose_name='Designe si la preuve est valable')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de la dernière modification')),
            ],
            options={
                'verbose_name': 'Preuve Video',
                'verbose_name_plural': 'Preuves Videos',
            },
        ),
    ]
